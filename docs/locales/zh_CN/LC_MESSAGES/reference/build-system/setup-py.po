# SOME DESCRIPTIVE TITLE.
# Copyright (C) The pip developers
# This file is distributed under the same license as the pip package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: pip 22.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-05 09:32+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../../html/reference/build-system/setup-py.md:1
msgid "`setup.py` (legacy)"
msgstr ""

#: ../../html/reference/build-system/setup-py.md:3
msgid ""
"Prior to the introduction of pyproject.toml-based builds (in {pep}`517` "
"and {pep}`518`), pip had only supported installing packages using "
"`setup.py` files that were built using {pypi}`setuptools`."
msgstr ""

#: ../../html/reference/build-system/setup-py.md:7
msgid ""
"The interface documented here is retained currently solely for legacy "
"purposes, until the migration to `pyproject.toml`-based builds can be "
"completed."
msgstr ""

#: ../../html/reference/build-system/setup-py.md:1
msgid ""
"The arguments and syntax of the various invocations of `setup.py` made by"
" pip, are considered an implementation detail that is strongly coupled "
"with {pypi}`setuptools`. This build system interface is not meant to be "
"used by any other build backend, which should be based on the {doc"
"}`pyproject-toml` build system interface instead."
msgstr ""

#: ../../html/reference/build-system/setup-py.md:7
msgid ""
"Further, projects should _not_ expect to rely on there being any form of "
"backward compatibility guarantees around the `setup.py` interface."
msgstr ""

#: ../../html/reference/build-system/setup-py.md:21
msgid "Build process"
msgstr ""

#: ../../html/reference/build-system/setup-py.md:23
msgid "The overall process for building a package is:"
msgstr ""

#: ../../html/reference/build-system/setup-py.md:25
msgid "Generate the package's metadata."
msgstr ""

#: ../../html/reference/build-system/setup-py.md:26
msgid "Generate a wheel for the package."
msgstr ""

#: ../../html/reference/build-system/setup-py.md:27
msgid ""
"If this fails and we're trying to install the package, attempt a direct "
"installation."
msgstr ""

#: ../../html/reference/build-system/setup-py.md:30
msgid "The wheel can then be used to perform an installation, if necessary."
msgstr ""

#: ../../html/reference/build-system/setup-py.md:32
msgid "Metadata Generation"
msgstr ""

#: ../../html/reference/build-system/setup-py.md:34
msgid ""
"As a first step, `pip` needs to get metadata about a package (name, "
"version, dependencies, and more). It collects this by calling `setup.py "
"egg_info`."
msgstr ""

#: ../../html/reference/build-system/setup-py.md:37
msgid ""
"The `egg_info` command generates the metadata for the package, which pip "
"can then consume and proceed to gather all the dependencies of the "
"package. Once the dependency resolution process is complete, pip will "
"proceed to the next stage of the build process for these packages."
msgstr ""

#: ../../html/reference/build-system/setup-py.md:42
msgid "Wheel Generation"
msgstr ""

#: ../../html/reference/build-system/setup-py.md:44
msgid ""
"When provided with a {term}`pypug:source distribution (or \"sdist\")` for"
" a package, pip will attempt to build a {term}`pypug:wheel`. Since wheel "
"distributions can be [cached](wheel-caching), this can greatly speed up "
"future installations for the package."
msgstr ""

#: ../../html/reference/build-system/setup-py.md:49
msgid ""
"This is done by calling `setup.py bdist_wheel` which requires the "
"{pypi}`wheel` package to be installed."
msgstr ""

#: ../../html/reference/build-system/setup-py.md:52
msgid ""
"If this wheel generation is successful (this can include compiling C/C++ "
"code, depending on the package), the generated wheel is added to pip's "
"wheel cache and will be used for this installation. The built wheel is "
"cached locally by pip to avoid repeated identical builds."
msgstr ""

#: ../../html/reference/build-system/setup-py.md:57
msgid ""
"If this wheel generation fails, pip runs `setup.py clean` to clean up any"
" build artifacts that may have been generated. After that, pip will "
"attempt a direct installation."
msgstr ""

#: ../../html/reference/build-system/setup-py.md:61
msgid "Direct Installation"
msgstr ""

#: ../../html/reference/build-system/setup-py.md:63
msgid ""
"When all else fails, pip will invoke `setup.py install` to install a "
"package using setuptools' mechanisms to perform the installation. This is"
" currently the last-resort fallback for projects that cannot be built "
"into wheels, and may not be supported in the future."
msgstr ""

#: ../../html/reference/build-system/setup-py.md:68
msgid "Editable Installation"
msgstr ""

#: ../../html/reference/build-system/setup-py.md:70
msgid ""
"For installing packages in \"editable\" mode ({ref}`pip install "
"--editable <install_--editable>`), pip will invoke `setup.py develop`, "
"which will use setuptools' mechanisms to perform an editable/development "
"installation."
msgstr ""

#: ../../html/reference/build-system/setup-py.md:75
msgid "Setuptools Injection"
msgstr ""

#: ../../html/reference/build-system/setup-py.md:77
msgid ""
"To support projects that directly use `distutils`, pip injects "
"`setuptools` into `sys.modules` before invoking `setup.py`. This "
"injection should be transparent to `distutils`-based projects."
msgstr ""

#: ../../html/reference/build-system/setup-py.md:81
msgid "Customising the build"
msgstr ""

#: ../../html/reference/build-system/setup-py.md:83
msgid ""
"The `--global-option` and `--build-option` arguments to the `pip install`"
" and `pip wheel` inject additional arguments into the `setup.py` command "
"(`--build-option` is only available in `pip wheel`)."
msgstr ""

#: ../../html/reference/build-system/setup-py.md:1
msgid ""
"The use of `--global-option` and `--build-option` is highly setuptools "
"specific, and is considered more an accident of the current "
"implementation than a supported interface. It is documented here for "
"completeness. These flags will not be supported, once this build system "
"interface is dropped."
msgstr ""

#: ../../html/reference/build-system/setup-py.md:94
msgid "These arguments are included in the command as follows:"
msgstr ""

#: ../../html/reference/build-system/setup-py.md:100
msgid ""
"The options are passed unmodified, and presently offer direct access to "
"the distutils command line. For example:"
msgstr ""

#: ../../html/reference/build-system/setup-py.md:11
msgid ""
"Linux  $ python -m pip wheel --global-option bdist_ext --global-option "
"-DFOO wheel MacOS  $ python -m pip wheel --global-option bdist_ext "
"--global-option -DFOO wheel Windows  C:> py -m pip wheel --global-option "
"bdist_ext --global-option -DFOO wheel"
msgstr ""

#: ../../html/reference/build-system/setup-py.md:107
msgid "will result in pip invoking:"
msgstr ""

#: ../../html/reference/build-system/setup-py.md:113
msgid "This passes a preprocessor symbol to the extension build."
msgstr ""

#: ../../html/reference/build-system/setup-py.md:117
msgid "Build Output"
msgstr ""

#: ../../html/reference/build-system/setup-py.md:119
msgid ""
"Any output produced by the build system will be read by pip (for display "
"to the user if requested). In order to correctly read the build system "
"output, pip requires that the output is written in a well-defined "
"encoding, specifically the encoding the user has configured for text "
"output (which can be obtained in Python using "
"`locale.getpreferredencoding`). If the configured encoding is ASCII, pip "
"assumes UTF-8 (to account for the behaviour of some Unix systems)."
msgstr ""

#: ../../html/reference/build-system/setup-py.md:126
msgid ""
"Build systems should ensure that any tools they invoke (compilers, etc) "
"produce output in the correct encoding. In practice - and in particular "
"on Windows, where tools are inconsistent in their use of the \"OEM\" and "
"\"ANSI\" codepages - this may not always be possible. pip will therefore "
"attempt to recover cleanly if presented with incorrectly encoded build "
"tool output, by translating unexpected byte sequences to Python-style "
"hexadecimal escape sequences (`\"\\x80\\xff\"`, etc). However, it is "
"still possible for output to be displayed using an incorrect encoding "
"(mojibake)."
msgstr ""

