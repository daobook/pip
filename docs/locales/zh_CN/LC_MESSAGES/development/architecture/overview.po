# SOME DESCRIPTIVE TITLE.
# Copyright (C) The pip developers
# This file is distributed under the same license as the pip package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: pip 22.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-05 09:32+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../../html/development/architecture/overview.rst:3
msgid ""
"This section of the documentation is currently being written. pip "
"developers welcome your help to complete this documentation. If you're "
"interested in helping out, please let us know in the `tracking issue`_."
msgstr ""

#: ../../html/development/architecture/overview.rst:10
msgid "Broad functionality overview"
msgstr ""

#: ../../html/development/architecture/overview.rst:12
msgid "pip is a package installer."
msgstr ""

#: ../../html/development/architecture/overview.rst:14
msgid ""
"pip does a lot more than installation; it also has a cache, and it has "
"configuration, and it has a CLI, which has its own quirks. But mainly:"
msgstr ""

#: ../../html/development/architecture/overview.rst:17
msgid "Things pip does:"
msgstr ""

#: ../../html/development/architecture/overview.rst
msgid ""
"Manages the building of packages (offloads package building to a backend)"
" when that’s necessary (a source distribution package -- this is not "
"necessary if the package is a wheel)."
msgstr ""

#: ../../html/development/architecture/overview.rst
msgid ""
"By default, pip delegates package-building to setuptools, for backwards "
"compatibility reasons. But thing with setuptools: has a ``setup.py`` file"
" that it invokes to …… get info?"
msgstr ""

#: ../../html/development/architecture/overview.rst:27
msgid ""
"Decides where to install stuff. Once the package is built, resulting "
"artifact is then installed into system in appropriate place. :pep:`517` "
"defines interface between build backend & installer."
msgstr ""

#: ../../html/development/architecture/overview.rst:32
msgid "Broad overview of flow"
msgstr ""

#: ../../html/development/architecture/overview.rst:34
msgid "In sequence, what does pip do?:"
msgstr ""

#: ../../html/development/architecture/overview.rst:36
msgid "Get user input (user-supplied string saying what package they want)"
msgstr ""

#: ../../html/development/architecture/overview.rst:37
msgid ""
"Figure out what that means: exactly what the user requested -- translate "
"to a thing pip can operate on (user input to requirements)"
msgstr ""

#: ../../html/development/architecture/overview.rst:39
msgid ""
"CORE OF THE WHOLE PROCESS, MAYBE? Once you have a set of reqs from Step "
"2, you have to expand those into a concrete “things to install” -- Figure"
" out what other requirements it has to install based on user-given "
"requirements, and where to get them from."
msgstr ""

#: ../../html/development/architecture/overview.rst:46
msgid "this step is convoluted - also exploratory, involves dependency"
msgstr ""

#: ../../html/development/architecture/overview.rst:45
msgid "resolution -- we need to get to the index, see what versions are available"
msgstr ""

#: ../../html/development/architecture/overview.rst:51
msgid "Sometimes you need to build the package itself in order to get"
msgstr ""

#: ../../html/development/architecture/overview.rst:49
msgid ""
"dependency information, which means fetching the package from package "
"index, which means knowing whether it exists. For a single package,"
msgstr ""

#: ../../html/development/architecture/overview.rst:53
msgid "Install the actual items to be installed."
msgstr ""

#: ../../html/development/architecture/overview.rst:55
msgid ""
"Why? pip installs from places other than PyPI! But also, we’ve never had "
"guarantees of PyPI’s JSON API before now, so no one has been getting "
"metadata from PyPI separate from downloading the package itself."
msgstr ""

#: ../../html/development/architecture/overview.rst:59
msgid "In terms of flow of the install process:"
msgstr ""

#: ../../html/development/architecture/overview.rst:61
msgid ""
"For 1 package: Get abstract requirement(s) for that package, and try and "
"see what that means (this abstract requirement can take various forms). "
"Define abstract dependencies."
msgstr ""

#: ../../html/development/architecture/overview.rst:65
msgid ""
"Once we have a set of \"this package, get it from here, this is that "
"version of that package\","
msgstr ""

#: ../../html/development/architecture/overview.rst:68
msgid ""
"Modify the environment to install those things (which means: place the "
"files in the right place). For example: if you already have version 6.0 "
"of a requirement and you are installing 7.2, uninstall 6.0 and install "
"7.2."
msgstr ""

#: ../../html/development/architecture/overview.rst:74
msgid "Download process"
msgstr ""

#: ../../html/development/architecture/overview.rst:76
msgid ""
"What happens in an install? Well, a subset of ``install``, a process pip "
"usually does during a ``pip install``, is ``download`` (also available to"
" the user as the :ref:`pip download` command). And we download and "
"INSPECT packages to get manifests. For any given package name, we need to"
" know what files are available and what their filenames are."
msgstr ""

#: ../../html/development/architecture/overview.rst:83
msgid ""
"pip can download from a Python package repository, where packages are "
"stored in a structured format so an installer like pip can find them."
msgstr ""

#: ../../html/development/architecture/overview.rst:86
msgid ":pep:`503` defines the API we use to talk to a Python package repository."
msgstr ""

#: ../../html/development/architecture/overview.rst:89
msgid "PyPI"
msgstr ""

#: ../../html/development/architecture/overview.rst:91
msgid ""
"What happens if we run ``pip download somepackage`` with no other "
"arguments?  By default we look at `PyPI`_, which is where pip knows where"
" to look to get more info for what the package index knows about "
"``somepackage``."
msgstr ""

#: ../../html/development/architecture/overview.rst:96
msgid ""
"``pip`` then knows: what files are available, and what their filenames "
"are."
msgstr ""

#: ../../html/development/architecture/overview.rst:99
msgid "IN OTHER WORDS"
msgstr ""

#: ../../html/development/architecture/overview.rst:101
msgid "While all dependencies have not been resolved, do the following:"
msgstr ""

#: ../../html/development/architecture/overview.rst:103
msgid ""
"Following the API defined in :pep:`503`, fetch the index page from "
"`http://{pypi_index}/simple/{package_name "
"<http://pypi.org/simple/%7Bpackage_name>`__}"
msgstr ""

#: ../../html/development/architecture/overview.rst:105
msgid "Parse all of the file links from the page."
msgstr ""

#: ../../html/development/architecture/overview.rst:106
msgid "Select a single file to download from the list of links."
msgstr ""

#: ../../html/development/architecture/overview.rst:107
msgid "Extract the metadata from the downloaded package."
msgstr ""

#: ../../html/development/architecture/overview.rst:108
msgid "Update the dependency tree based on the metadata."
msgstr ""

#: ../../html/development/architecture/overview.rst:110
msgid ""
"The package index gives pip a list of files for that package (via the "
"existing PyPI API). The files have the version and some other info that "
"helps pip decide whether that's something pip ought to download."
msgstr ""

#: ../../html/development/architecture/overview.rst:112
msgid "pip chooses from the list a single file to download."
msgstr ""

#: ../../html/development/architecture/overview.rst:114
msgid "It may go back and choose another file to download"
msgstr ""

#: ../../html/development/architecture/overview.rst:116
msgid ""
"When pip looks at the package index, the place where it looks has "
"basically a link. The link’s text is the name of the file"
msgstr ""

#: ../../html/development/architecture/overview.rst:119
msgid ""
"This is the `PyPI Simple API`_ (PyPI has several APIs, some are being "
"deprecated). pip looks at Simple API, documented initially at :pep:`503` "
"-- packaging.python.org has PyPA specifications with more details for "
"Simple Repository API"
msgstr ""

#: ../../html/development/architecture/overview.rst:124
msgid "For this package name -- this is the list of files available"
msgstr ""

#: ../../html/development/architecture/overview.rst:126
msgid "Looks there for:"
msgstr ""

#: ../../html/development/architecture/overview.rst:128
msgid "The list of filenames"
msgstr ""

#: ../../html/development/architecture/overview.rst:129
msgid "Other info"
msgstr ""

#: ../../html/development/architecture/overview.rst:131
msgid "Once it has those, selects one file, downloads it"
msgstr ""

#: ../../html/development/architecture/overview.rst:133
msgid ""
"(Question: If I want to ``pip install flask``, I think the whole list of "
"filenames cannot….should not be …. ? I want only the Flask …. Why am I "
"getting the whole list?"
msgstr ""

#: ../../html/development/architecture/overview.rst:137
msgid ""
"Answer: It's not every file, just files of Flask. No API for getting "
"alllllll files on PyPI. It’s for getting all files of Flask.)"
msgstr ""

