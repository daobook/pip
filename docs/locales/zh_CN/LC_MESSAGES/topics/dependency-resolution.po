# SOME DESCRIPTIVE TITLE.
# Copyright (C) The pip developers
# This file is distributed under the same license as the pip package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: pip 22.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-05 09:32+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../../html/topics/dependency-resolution.md:1
msgid "Dependency Resolution"
msgstr ""

#: ../../html/topics/dependency-resolution.md:3
msgid ""
"pip is capable of determining and installing the dependencies of "
"packages. The process of determining which version of a dependency to "
"install is known as dependency resolution. This behaviour can be disabled"
" by passing {any}`--no-deps` to {any}`pip install`."
msgstr ""

#: ../../html/topics/dependency-resolution.md:8
msgid "How it works"
msgstr ""

#: ../../html/topics/dependency-resolution.md:10
msgid ""
"When a user does a `pip install` (e.g. `pip install tea`), pip needs to "
"work out the package's dependencies (e.g. `spoon`, `hot-water`, `tea-"
"leaves` etc.) and what the versions of each of those dependencies it "
"should install."
msgstr ""

#: ../../html/topics/dependency-resolution.md:14
msgid ""
"At the start of a `pip install` run, pip does not have all the dependency"
" information of the requested packages. It needs to work out the "
"dependencies of the requested packages, the dependencies of those "
"dependencies, and so on. Over the course of the dependency resolution "
"process, pip will need to download distribution files of the packages "
"which are used to get the dependencies of a package."
msgstr ""

#: ../../html/topics/dependency-resolution.md:21
msgid "Backtracking"
msgstr ""

#: ../../html/topics/dependency-resolution.md:1
msgid "pip's dependency resolver is now capable of backtracking."
msgstr ""

#: ../../html/topics/dependency-resolution.md:27
msgid ""
"During dependency resolution, pip needs to make assumptions about the "
"package versions it needs to install and, later, check these assumptions "
"were not incorrect. When pip finds that an assumption it made earlier is "
"incorrect, it has to backtrack, which means also discarding some of the "
"work that has already been done, and going back to choose another path."
msgstr ""

#: ../../html/topics/dependency-resolution.md:33
msgid ""
"This can look like pip downloading multiple versions of the same package,"
" since pip explicitly presents each download to the user. The "
"backtracking of choices made during is not unexpected behaviour or a bug."
" It is part of how dependency resolution for Python packages works."
msgstr ""

#: ../../html/topics/dependency-resolution.md:23
#: ../../html/topics/dependency-resolution.md:38
msgid "Example"
msgstr ""

#: ../../html/topics/dependency-resolution.md:1
msgid ""
"The user requests `pip install tea`. The package `tea` declares a "
"dependency on `hot-water`, `spoon`, `cup`, amongst others."
msgstr ""

#: ../../html/topics/dependency-resolution.md:4
msgid ""
"pip starts by picking the most recent version of `tea` and get the list "
"of dependencies of that version of `tea`. It will then repeat the process"
" for those packages, picking the most recent version of `spoon` and then "
"`cup`. Now, pip notices that the version of `cup` it has chosen is not "
"compatible with the version of `spoon` it has chosen. Thus, pip will \"go"
" back\" (backtrack) and try to use another version of `cup`. If it is "
"successful, it will continue onto the next package (like `sugar`). "
"Otherwise, it will continue to backtrack on `cup` until it finds a "
"version of `cup` that is compatible with all the other packages."
msgstr ""

#: ../../html/topics/dependency-resolution.md:14
msgid "This can look like:"
msgstr ""

#: ../../html/topics/dependency-resolution.md:55
msgid ""
"These multiple `Downloading cup-{version}` lines show that pip is "
"backtracking choices it is making during dependency resolution."
msgstr ""

#: ../../html/topics/dependency-resolution.md:97
msgid ""
"If pip starts backtracking during dependency resolution, it does not know"
" how many choices it will reconsider, and how much computation would be "
"needed."
msgstr ""

#: ../../html/topics/dependency-resolution.md:100
msgid ""
"For the user, this means it can take a long time to complete when pip "
"starts backtracking. In the case where a package has a lot of versions, "
"arriving at a good candidate can take a lot of time. The amount of time "
"depends on the package size, the number of versions pip must try, and "
"various other factors."
msgstr ""

#: ../../html/topics/dependency-resolution.md:105
msgid ""
"Backtracking reduces the risk that installing a new package will "
"accidentally break an existing installed package, and so reduces the risk"
" that your environment gets messed up. To do this, pip has to do more "
"work, to find out which version of a package is a good candidate to "
"install."
msgstr ""

#: ../../html/topics/dependency-resolution.md:110
msgid "Possible ways to reduce backtracking"
msgstr ""

#: ../../html/topics/dependency-resolution.md:112
msgid ""
"There is no one-size-fits-all answer to situations where pip is "
"backtracking excessively during dependency resolution. There are ways to "
"reduce the degree to which pip might backtrack though. Nearly all of "
"these approaches require some amount of trial and error."
msgstr ""

#: ../../html/topics/dependency-resolution.md:117
msgid "Allow pip to complete its backtracking"
msgstr ""

#: ../../html/topics/dependency-resolution.md:119
msgid ""
"In most cases, pip will complete the backtracking process successfully. "
"This could take a very long time to complete, so this may not be your "
"preferred option."
msgstr ""

#: ../../html/topics/dependency-resolution.md:123
msgid ""
"However, it is a possible that pip will not be able to find a set of "
"compatible versions. For this, pip will try every possible combination "
"that it needs to and determine that there is no compatible set."
msgstr ""

#: ../../html/topics/dependency-resolution.md:127
msgid ""
"If you'd prefer not to wait, you can interrupt pip (Ctrl+c) and try the "
"strategies listed below."
msgstr ""

#: ../../html/topics/dependency-resolution.md:130
msgid "Reduce the number of versions pip is trying to use"
msgstr ""

#: ../../html/topics/dependency-resolution.md:132
msgid ""
"It is usually a good idea to add constraints the package(s) that pip is "
"backtracking on (e.g. in the above example - `cup`)."
msgstr ""

#: ../../html/topics/dependency-resolution.md:134
msgid "You could try something like:"
msgstr ""

#: ../../html/topics/dependency-resolution.md:11
msgid ""
"Linux  $ python -m pip install tea \"cup >= 3.13\" MacOS  $ python -m pip"
" install tea \"cup >= 3.13\" Windows  C:> py -m pip install tea \"cup >= "
"3.13\""
msgstr ""

#: ../../html/topics/dependency-resolution.md:140
msgid ""
"This will reduce the number of versions of `cup` it tries, and possibly "
"reduce the time pip takes to install."
msgstr ""

#: ../../html/topics/dependency-resolution.md:143
msgid ""
"There is a possibility that the addition constraint is incorrect. When "
"this happens, the reduced search space makes it easier for pip to more "
"quickly determine what caused the conflict and present that to the user. "
"It could also result in pip backtracking on a different package due to "
"some other conflict."
msgstr ""

#: ../../html/topics/dependency-resolution.md:148
msgid "Use constraint files or lockfiles"
msgstr ""

#: ../../html/topics/dependency-resolution.md:150
msgid ""
"This option is a progression of the previous section. It requires users "
"to know how to inspect:"
msgstr ""

#: ../../html/topics/dependency-resolution.md:153
msgid "the packages they're trying to install"
msgstr ""

#: ../../html/topics/dependency-resolution.md:154
msgid "the package release frequency and compatibility policies"
msgstr ""

#: ../../html/topics/dependency-resolution.md:155
msgid "their release notes and changelogs from past versions"
msgstr ""

#: ../../html/topics/dependency-resolution.md:157
msgid ""
"During deployment, you can create a lockfile stating the exact package "
"and version number for for each dependency of that package. You can "
"create this with `pip-tools <https://github.com/jazzband/pip-"
"tools/>`\\_\\_."
msgstr ""

#: ../../html/topics/dependency-resolution.md:161
msgid ""
"This means the \"work\" is done once during development process, and thus"
" will avoid performing dependency resolution during deployment."
msgstr ""

#: ../../html/topics/dependency-resolution.md:164
msgid "Dealing with dependency conflicts"
msgstr ""

#: ../../html/topics/dependency-resolution.md:166
msgid ""
"This section provides practical suggestions to pip users who encounter a "
"`ResolutionImpossible` error, where pip cannot install their specified "
"packages due to conflicting dependencies."
msgstr ""

#: ../../html/topics/dependency-resolution.md:170
msgid "Understanding your error message"
msgstr ""

#: ../../html/topics/dependency-resolution.md:172
msgid ""
"When you get a `ResolutionImpossible` error, you might see something like"
" this:"
msgstr ""

#: ../../html/topics/dependency-resolution.md:23
msgid ""
"Linux  $ python -m pip install \"pytest < 4.6\" pytest-cov==2.12.1 "
"[regular pip output] ERROR: Cannot install pytest-cov==2.12.1 and "
"pytest<4.6 because these package versions have conflicting dependencies."
"  The conflict is caused by:     The user requested pytest<4.6     "
"pytest-cov 2.12.1 depends on pytest>=4.6 MacOS  $ python -m pip install "
"\"pytest < 4.6\" pytest-cov==2.12.1 [regular pip output] ERROR: Cannot "
"install pytest-cov==2.12.1 and pytest<4.6 because these package versions "
"have conflicting dependencies.  The conflict is caused by:     The user "
"requested pytest<4.6     pytest-cov 2.12.1 depends on pytest>=4.6 Windows"
"  C:> py -m pip install \"pytest < 4.6\" pytest-cov==2.12.1 [regular pip "
"output] ERROR: Cannot install pytest-cov==2.12.1 and pytest<4.6 because "
"these package versions have conflicting dependencies.  The conflict is "
"caused by:     The user requested pytest<4.6     pytest-cov 2.12.1 "
"depends on pytest>=4.6"
msgstr ""

#: ../../html/topics/dependency-resolution.md:185
msgid ""
"In this example, pip cannot install the packages requested because they "
"are asking for conflicting versions of pytest."
msgstr ""

#: ../../html/topics/dependency-resolution.md:188
msgid ""
"`pytest-cov` version `2.12.1`, requires `pytest` with a version or equal "
"to `4.6`."
msgstr ""

#: ../../html/topics/dependency-resolution.md:190
msgid ""
"`package_tea` version `4.3.0` depends on version `2.3.1` of "
"`package_water`"
msgstr ""

#: ../../html/topics/dependency-resolution.md:193
msgid ""
"Sometimes these messages are straightforward to read, because they use "
"commonly understood comparison operators to specify the required version "
"(e.g. `<` or `>`)."
msgstr ""

#: ../../html/topics/dependency-resolution.md:197
msgid ""
"However, Python packaging also supports some more complex ways for "
"specifying package versions (e.g. `~=` or `*`):"
msgstr ""

#: ../../html/topics/dependency-resolution.md:23
msgid "Operator"
msgstr ""

#: ../../html/topics/dependency-resolution.md:23
msgid "Description"
msgstr ""

#: ../../html/topics/dependency-resolution.md:23
msgid "`>`"
msgstr ""

#: ../../html/topics/dependency-resolution.md:23
msgid "Any version greater than the specified version."
msgstr ""

#: ../../html/topics/dependency-resolution.md:23
msgid "`>3.1`: any version greater than `3.1`."
msgstr ""

#: ../../html/topics/dependency-resolution.md:23
msgid "`<`"
msgstr ""

#: ../../html/topics/dependency-resolution.md:23
msgid "Any version less than the specified version."
msgstr ""

#: ../../html/topics/dependency-resolution.md:23
msgid "`<3.1`: any version less than `3.1`."
msgstr ""

#: ../../html/topics/dependency-resolution.md:23
msgid "`<=`"
msgstr ""

#: ../../html/topics/dependency-resolution.md:23
msgid "Any version less than or equal to the specified version."
msgstr ""

#: ../../html/topics/dependency-resolution.md:23
msgid "`<=3.1`: any version less than or equal to `3.1`."
msgstr ""

#: ../../html/topics/dependency-resolution.md:23
msgid "`>=`"
msgstr ""

#: ../../html/topics/dependency-resolution.md:23
msgid "Any version greater than or equal to the specified version."
msgstr ""

#: ../../html/topics/dependency-resolution.md:23
msgid "`>=3.1`: version `3.1` and greater."
msgstr ""

#: ../../html/topics/dependency-resolution.md:23
msgid "`==`"
msgstr ""

#: ../../html/topics/dependency-resolution.md:23
msgid "Exactly the specified version."
msgstr ""

#: ../../html/topics/dependency-resolution.md:23
msgid "`==3.1`: only `3.1`."
msgstr ""

#: ../../html/topics/dependency-resolution.md:23
msgid "`!=`"
msgstr ""

#: ../../html/topics/dependency-resolution.md:23
msgid "Any version not equal to the specified version."
msgstr ""

#: ../../html/topics/dependency-resolution.md:23
msgid "`!=3.1`: any version other than `3.1`."
msgstr ""

#: ../../html/topics/dependency-resolution.md:23
msgid "`~=`"
msgstr ""

#: ../../html/topics/dependency-resolution.md:23
msgid "Any compatible{sup}`1` version."
msgstr ""

#: ../../html/topics/dependency-resolution.md:23
msgid "`~=3.1`: any version compatible{sup}`1` with `3.1`."
msgstr ""

#: ../../html/topics/dependency-resolution.md:23
msgid "`*`"
msgstr ""

#: ../../html/topics/dependency-resolution.md:23
msgid "Can be used at the end of a version number to represent _all_."
msgstr ""

#: ../../html/topics/dependency-resolution.md:23
msgid "`==3.1.*`: any version that starts with `3.1`."
msgstr ""

#: ../../html/topics/dependency-resolution.md:211
msgid ""
"{sup}`1` Compatible versions are higher versions that only differ in the "
"final segment. `~=3.1.2` is equivalent to `>=3.1.2, ==3.1.*`. `~=3.1` is "
"equivalent to `>=3.1, ==3.*`."
msgstr ""

#: ../../html/topics/dependency-resolution.md:214
msgid ""
"The detailed specification of supported comparison operators can be found"
" in {pep}`440`."
msgstr ""

#: ../../html/topics/dependency-resolution.md:217
msgid "Possible solutions"
msgstr ""

#: ../../html/topics/dependency-resolution.md:219
msgid ""
"The solution to your error will depend on your individual use case. Here "
"are some things to try:"
msgstr ""

#: ../../html/topics/dependency-resolution.md:222
msgid "Audit your top level requirements"
msgstr ""

#: ../../html/topics/dependency-resolution.md:224
msgid ""
"As a first step, it is useful to audit your project and remove any "
"unnecessary or out of date requirements (e.g. from your `setup.py` or "
"`requirements.txt` files). Removing these can significantly reduce the "
"complexity of your dependency tree, thereby reducing opportunities for "
"conflicts to occur."
msgstr ""

#: ../../html/topics/dependency-resolution.md:230
msgid "Loosen your top level requirements"
msgstr ""

#: ../../html/topics/dependency-resolution.md:232
msgid ""
"Sometimes the packages that you have asked pip to install are "
"incompatible because you have been too strict when you specified the "
"package version."
msgstr ""

#: ../../html/topics/dependency-resolution.md:236
msgid ""
"In our first example both `package_coffee` and `package_tea` have been "
"_pinned_ to use specific versions (`package_coffee==0.44.1b0 "
"package_tea==4.3.0`)."
msgstr ""

#: ../../html/topics/dependency-resolution.md:240
msgid ""
"To find a version of both `package_coffee` and `package_tea` that depend "
"on the same version of `package_water`, you might consider:"
msgstr ""

#: ../../html/topics/dependency-resolution.md:243
msgid ""
"Loosening the range of packages that you are prepared to install (e.g. "
"`pip install \"package_coffee>0.44.*\" \"package_tea>4.0.0\"`)"
msgstr ""

#: ../../html/topics/dependency-resolution.md:245
msgid ""
"Asking pip to install _any_ version of `package_coffee` and `package_tea`"
" by removing the version specifiers altogether (e.g. `pip install "
"package_coffee package_tea`)"
msgstr ""

#: ../../html/topics/dependency-resolution.md:249
msgid ""
"In the second case, pip will automatically find a version of both "
"`package_coffee` and `package_tea` that depend on the same version of "
"`package_water`, installing:"
msgstr ""

#: ../../html/topics/dependency-resolution.md:253
msgid "`package_coffee 0.46.0b0`, which depends on `package_water 2.6.1`"
msgstr ""

#: ../../html/topics/dependency-resolution.md:254
msgid "`package_tea 4.3.0` which _also_ depends on `package_water 2.6.1`"
msgstr ""

#: ../../html/topics/dependency-resolution.md:256
msgid ""
"If you want to prioritize one package over another, you can add version "
"specifiers to _only_ the more important package:"
msgstr ""

#: ../../html/topics/dependency-resolution.md:11
msgid ""
"Linux  $ python -m pip install package_coffee==0.44.1b0 package_tea MacOS"
"  $ python -m pip install package_coffee==0.44.1b0 package_tea Windows  "
"C:> py -m pip install package_coffee==0.44.1b0 package_tea"
msgstr ""

#: ../../html/topics/dependency-resolution.md:263
msgid "This will result in:"
msgstr ""

#: ../../html/topics/dependency-resolution.md:265
msgid "`package_coffee 0.44.1b0`, which depends on `package_water 2.6.1`"
msgstr ""

#: ../../html/topics/dependency-resolution.md:266
msgid "`package_tea 4.1.3` which also depends on `package_water 2.6.1`"
msgstr ""

#: ../../html/topics/dependency-resolution.md:268
msgid ""
"Now that you have resolved the issue, you can repin the compatible "
"package versions as required."
msgstr ""

#: ../../html/topics/dependency-resolution.md:271
msgid "Loosen the requirements of your dependencies"
msgstr ""

#: ../../html/topics/dependency-resolution.md:273
msgid ""
"Assuming that you cannot resolve the conflict by loosening the version of"
" the package you require (as above), you can try to fix the issue on your"
" _dependency_ by:"
msgstr ""

#: ../../html/topics/dependency-resolution.md:277
msgid "Requesting that the package maintainers loosen _their_ dependencies"
msgstr ""

#: ../../html/topics/dependency-resolution.md:278
msgid "Forking the package and loosening the dependencies yourself"
msgstr ""

#: ../../html/topics/dependency-resolution.md:280
msgid ""
":::{warning} If you choose to fork the package yourself, you are _opting "
"out_ of any support provided by the package maintainers. Proceed at your "
"own risk! :::"
msgstr ""

#: ../../html/topics/dependency-resolution.md:285
msgid "All requirements are appropriate, but a solution does not exist"
msgstr ""

#: ../../html/topics/dependency-resolution.md:287
msgid ""
"Sometimes it's simply impossible to find a combination of package "
"versions that do not conflict. Welcome to [dependency hell]."
msgstr ""

#: ../../html/topics/dependency-resolution.md:290
msgid "In this situation, you could consider:"
msgstr ""

#: ../../html/topics/dependency-resolution.md:292
msgid ""
"Using an alternative package, if that is acceptable for your project. See"
" [Awesome Python] for similar packages."
msgstr ""

#: ../../html/topics/dependency-resolution.md:294
msgid ""
"Refactoring your project to reduce the number of dependencies (for "
"example, by breaking up a monolithic code base into smaller pieces)."
msgstr ""

#: ../../html/topics/dependency-resolution.md:297
msgid "Getting help"
msgstr ""

#: ../../html/topics/dependency-resolution.md:299
msgid ""
"If none of the suggestions above work for you, we recommend that you ask "
"for help on:"
msgstr ""

#: ../../html/topics/dependency-resolution.md:302
msgid "[Python user Discourse](https://discuss.python.org/c/users/7)"
msgstr ""

#: ../../html/topics/dependency-resolution.md:303
msgid "[Python user forums](https://www.python.org/community/forums/)"
msgstr ""

#: ../../html/topics/dependency-resolution.md:304
msgid "[Python developers Slack channel](https://pythondev.slack.com/)"
msgstr ""

#: ../../html/topics/dependency-resolution.md:305
msgid "[Python IRC](https://www.python.org/community/irc/)"
msgstr ""

#: ../../html/topics/dependency-resolution.md:306
msgid "[Stack Overflow](https://stackoverflow.com/questions/tagged/python)"
msgstr ""

#: ../../html/topics/dependency-resolution.md:308
msgid "See [\"How do I ask a good question?\"] for tips on asking for help."
msgstr ""

#: ../../html/topics/dependency-resolution.md:310
msgid ""
"Unfortunately, **the pip team cannot provide support for individual "
"dependency conflict errors**. Please _only_ open a ticket on [pip's issue"
" tracker](https://github.com/pypa/pip/issues) if you believe that your "
"problem has exposed a bug in pip."
msgstr ""

